// server.js - G≈Ç√≥wny plik serwera (uproszczony)
const express = require('express');
const config = require('./config');
const { initializeDirectories, logActivity } = require('./utils');
const { securityMiddleware, protectFilesMiddleware, notFoundHandler, errorHandler } = require('./middleware');

// Import tras
const mainRoutes = require('./routes');
const apiRoutes = require('./api-routes');

const app = express();

// üîß Inicjalizacja
initializeDirectories();

// üõ°Ô∏è Middleware globalne
app.use(securityMiddleware);
app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// üîç Debug middleware - loguj wszystkie ≈ºƒÖdania
app.use((req, res, next) => {
    console.log(`üåê ${req.method} ${req.path}`);
    next();
});

// üì∑ Zabezpieczenie dostƒôpu do plik√≥w - tylko odczyt
app.use('/uploads', protectFilesMiddleware, express.static(config.UPLOADS_DIR));

// üõ£Ô∏è Trasy - POPRAWIONA KOLEJNO≈öƒÜ
app.use('/', mainRoutes);           // Strony HTML na ko≈Ñcu
app.use('/api', apiRoutes);         // API endpoints NAJPIERW

// üö® Obs≈Çuga b≈Çƒôd√≥w
app.use('*', notFoundHandler);      // 404
app.use(errorHandler);              // B≈Çƒôdy serwera

// üöÄ Uruchomienie serwera
app.listen(config.PORT, '0.0.0.0', () => {
    const startupMessage = `
üéâ Wedding Photos uruchomione!

üìç Panel organizatora: http://localhost:${config.PORT}
üì± Strona dla go≈õci: http://localhost:${config.PORT}/upload
üìä Statystyki: http://localhost:${config.PORT}/logs
üìÅ Zdjƒôcia zapisywane w: ${config.UPLOADS_DIR}
üìã Logi w: ${config.LOG_FILE}

‚ú® FUNKCJE:
- ‚úÖ ZERO hase≈Ç - maksymalna prostota dla go≈õci
- ‚úÖ Pliki RAZ przes≈Çane = NA ZAWSZE bezpieczne
- ‚úÖ Automatyczna ochrona przed usuwaniem
- ‚úÖ Rate limiting (${config.RATE_LIMIT.MAX_UPLOADS} przes≈Ça≈Ñ / ${config.RATE_LIMIT.WINDOW_MS/1000/60} min)
- ‚úÖ Obs≈Çuga zdjƒôƒá i film√≥w (do ${config.MAX_FILE_SIZE/1024/1024}MB)

üõ°Ô∏è BEZPIECZE≈ÉSTWO:
- ‚úÖ Tylko upload i odczyt - ZERO usuwania
- ‚úÖ Bezpieczne nazwy plik√≥w (losowe)
- ‚úÖ Walidacja typ√≥w plik√≥w
- ‚úÖ Blokada niebezpiecznych metod HTTP
- ‚úÖ Logi aktywno≈õci

üí° NASTƒòPNE KROKI:
1. Zmie≈Ñ EVENT_NAME w config.js na swojƒÖ nazwƒô
2. Uruchom Cloudflare Tunnel: cloudflared tunnel --url http://localhost:${config.PORT}
3. Wygeneruj QR kod w panelu organizatora
4. Wydrukuj QR kod dla go≈õci
5. Gotowe! üöÄ

üåê TUNELOWANIE:
Aby udostƒôpniƒá przez internet, uruchom w nowym oknie PowerShell:
cloudflared tunnel --url http://localhost:${config.PORT}
    `;
    
    console.log(startupMessage);
    logActivity('SERVER_STARTED', `Wedding Photos app started on port ${config.PORT}`);
    logActivity('CONFIG_LOADED', `Event: ${config.EVENT_NAME}, Max file size: ${config.MAX_FILE_SIZE/1024/1024}MB`);
});

// üõë Graceful shutdown
const gracefulShutdown = () => {
    console.log('\nüëã Zamykanie Wedding Photos...');
    
    logActivity('SERVER_STOPPING', 'Graceful shutdown initiated');
    
    // Daj czas na zako≈Ñczenie aktualnych request√≥w
    setTimeout(() => {
        console.log('‚úÖ Wszystkie zdjƒôcia pozostajƒÖ bezpieczne w folderze:', config.UPLOADS_DIR);
        console.log('üìã Logi aktywno≈õci zapisane w:', config.LOG_FILE);
        
        logActivity('SERVER_STOPPED', 'Wedding Photos app stopped gracefully');
        process.exit(0);
    }, 1000);
};

// Obs≈Çuga sygna≈Ç√≥w zamkniƒôcia
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Obs≈Çuga nieobs≈Çu≈ºonych b≈Çƒôd√≥w
process.on('uncaughtException', (error) => {
    console.error('üí• Nieobs≈Çu≈ºony b≈ÇƒÖd:', error);
    logActivity('UNCAUGHT_EXCEPTION', error.message);
    gracefulShutdown();
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• Nieobs≈Çu≈ºone odrzucenie promise:', reason);
    logActivity('UNHANDLED_REJECTION', String(reason));
});

// Export dla ewentualnych test√≥w
module.exports = app;